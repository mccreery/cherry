package tk.nukeduck.lightsaber.client.renderer;

import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

public class ModelLightsaberADouble extends ModelBaseLightsaber {
	ModelRenderer UpperRing;
	ModelRenderer LowerRing;
	ModelRenderer SideBox;
	ModelRenderer MainBody;
	ModelRenderer UpperButton;
	ModelRenderer LowerButton;
	ModelRenderer BackHolder;
	ModelRenderer LeftHolder1;
	ModelRenderer RightHolder1;
	ModelRenderer LeftHolder2;
	ModelRenderer RightHolder2;
	ModelRenderer FrontHolder;
	ModelRenderer RightHolder3;
	ModelRenderer LeftHolder3;
	ModelRenderer Blade1;
	ModelRenderer Blade2;
	ModelRenderer TopHolder;
	ModelRenderer FrontHolderB;
	ModelRenderer LeftHolder3B;
	ModelRenderer RightHolder3B;
	ModelRenderer LeftHolder2B;
	ModelRenderer RightHolder2B;
	ModelRenderer RightHolder1B;
	ModelRenderer LeftHolder1B;
	ModelRenderer BackHolderB;
	ModelRenderer TopHolderB;
	
	public ModelLightsaberADouble() {
		this.bladeOffset = 16;
		this.doubledOffset = 39;
		
		textureWidth = 32;
		textureHeight = 64;

		UpperRing = new ModelRenderer(this, 10, 12);
		UpperRing.addBox(0F, 0F, 0F, 5, 1, 5);
		UpperRing.setRotationPoint(-2.5F, 18F, -2.5F);
		UpperRing.setTextureSize(32, 64);
		UpperRing.mirror = true;
		setRotation(UpperRing, 0F, 0F, 0F);
		LowerRing = new ModelRenderer(this, 10, 12);
		LowerRing.addBox(0F, 0F, 0F, 5, 1, 5);
		LowerRing.setRotationPoint(-2.5F, 20F, -2.5F);
		LowerRing.setTextureSize(32, 64);
		LowerRing.mirror = true;
		setRotation(LowerRing, 0F, 0F, 0F);
		SideBox = new ModelRenderer(this, 16, 4);
		SideBox.addBox(0F, 0F, 0F, 1, 4, 3);
		SideBox.setRotationPoint(-3.5F, 17.5F, -1.5F);
		SideBox.setTextureSize(32, 64);
		SideBox.mirror = true;
		setRotation(SideBox, 0F, 0F, 0F);
		MainBody = new ModelRenderer(this, 0, 0);
		MainBody.addBox(0F, 0F, 0F, 4, 7, 4);
		MainBody.setRotationPoint(-2F, 16F, -2F);
		MainBody.setTextureSize(32, 64);
		MainBody.mirror = true;
		setRotation(MainBody, 0F, 0F, 0F);
		UpperButton = new ModelRenderer(this, 24, 7);
		UpperButton.addBox(0F, 0F, 0F, 1, 1, 1);
		UpperButton.setRotationPoint(2.5F, 18F, -0.5F);
		UpperButton.setTextureSize(32, 64);
		UpperButton.mirror = true;
		setRotation(UpperButton, 0F, 0F, 0F);
		LowerButton = new ModelRenderer(this, 24, 7);
		LowerButton.addBox(0F, 0F, 0F, 1, 1, 1);
		LowerButton.setRotationPoint(2.5F, 20F, -0.5F);
		LowerButton.setTextureSize(32, 64);
		LowerButton.mirror = true;
		setRotation(LowerButton, 0F, 0F, 0F);
		BackHolder = new ModelRenderer(this, 10, 18);
		BackHolder.addBox(0F, 0F, 0F, 1, 4, 4);
		BackHolder.setRotationPoint(1.5F, 12.5F, -2F);
		BackHolder.setTextureSize(32, 64);
		BackHolder.mirror = true;
		setRotation(BackHolder, 0F, 0F, 0F);
		LeftHolder1 = new ModelRenderer(this, 15, 0);
		LeftHolder1.addBox(0F, 0F, 0F, 2, 3, 1);
		LeftHolder1.setRotationPoint(0F, 13.5F, -2.5F);
		LeftHolder1.setTextureSize(32, 64);
		LeftHolder1.mirror = true;
		setRotation(LeftHolder1, 0F, 0F, 0F);
		RightHolder1 = new ModelRenderer(this, 15, 0);
		RightHolder1.addBox(0F, 0F, 0F, 2, 3, 1);
		RightHolder1.setRotationPoint(0F, 13.5F, 1.5F);
		RightHolder1.setTextureSize(32, 64);
		RightHolder1.mirror = true;
		setRotation(RightHolder1, 0F, 0F, 0F);
		LeftHolder2 = new ModelRenderer(this, 0, 0);
		LeftHolder2.addBox(0F, 0F, 0F, 1, 2, 1);
		LeftHolder2.setRotationPoint(-1F, 14.5F, -2.5F);
		LeftHolder2.setTextureSize(32, 64);
		LeftHolder2.mirror = true;
		setRotation(LeftHolder2, 0F, 0F, 0F);
		RightHolder2 = new ModelRenderer(this, 0, 0);
		RightHolder2.addBox(0F, 0F, 0F, 1, 2, 1);
		RightHolder2.setRotationPoint(-1F, 14.5F, 1.5F);
		RightHolder2.setTextureSize(32, 64);
		RightHolder2.mirror = true;
		setRotation(RightHolder2, 0F, 0F, 0F);
		FrontHolder = new ModelRenderer(this, 21, 0);
		FrontHolder.addBox(0F, 0F, 0F, 1, 1, 4);
		FrontHolder.setRotationPoint(-2.5F, 15.5F, -2F);
		FrontHolder.setTextureSize(32, 64);
		FrontHolder.mirror = true;
		setRotation(FrontHolder, 0F, 0F, 0F);
		RightHolder3 = new ModelRenderer(this, 24, 5);
		RightHolder3.addBox(0F, 0F, 0F, 1, 1, 1);
		RightHolder3.setRotationPoint(-2F, 15.5F, 1.5F);
		RightHolder3.setTextureSize(32, 64);
		RightHolder3.mirror = true;
		setRotation(RightHolder3, 0F, 0F, 0F);
		LeftHolder3 = new ModelRenderer(this, 24, 5);
		LeftHolder3.addBox(0F, 0F, 0F, 1, 1, 1);
		LeftHolder3.setRotationPoint(-2F, 15.5F, -2.5F);
		LeftHolder3.setTextureSize(32, 64);
		LeftHolder3.mirror = true;
		setRotation(LeftHolder3, 0F, 0F, 0F);
		Blade1 = new ModelRenderer(this, 10, 29);
		Blade1.addBox(0F, 0F, 0F, 3, 32, 2);
		Blade1.setRotationPoint(-1.5F, -16F, -1F);
		Blade1.setTextureSize(32, 64);
		Blade1.mirror = true;
		setRotation(Blade1, 0F, 0F, 0F);
		Blade2 = new ModelRenderer(this, 0, 12);
		Blade2.addBox(0F, 0F, 0F, 2, 32, 3);
		Blade2.setRotationPoint(-1F, -16F, -1.5F);
		Blade2.setTextureSize(32, 64);
		Blade2.mirror = true;
		setRotation(Blade2, 0F, 0F, 0F);
		TopHolder = new ModelRenderer(this, 10, 26);
		TopHolder.addBox(0F, 0F, 0F, 1, 1, 2);
		TopHolder.setRotationPoint(1.5F, 11.5F, -1F);
		TopHolder.setTextureSize(32, 64);
		TopHolder.mirror = true;
		setRotation(TopHolder, 0F, 0F, 0F);
		FrontHolderB = new ModelRenderer(this, 21, 0);
		FrontHolderB.addBox(0F, 0F, 0F, 1, 1, 4);
		FrontHolderB.setRotationPoint(-2.5F, 22.5F, -2F);
		FrontHolderB.setTextureSize(32, 64);
		FrontHolderB.mirror = true;
		setRotation(FrontHolderB, 0F, 0F, 0F);
		LeftHolder3B = new ModelRenderer(this, 24, 5);
		LeftHolder3B.addBox(0F, 0F, 0F, 1, 1, 1);
		LeftHolder3B.setRotationPoint(-2F, 22.5F, -2.5F);
		LeftHolder3B.setTextureSize(32, 64);
		LeftHolder3B.mirror = true;
		setRotation(LeftHolder3B, 0F, 0F, 0F);
		RightHolder3B = new ModelRenderer(this, 24, 5);
		RightHolder3B.addBox(0F, 0F, 0F, 1, 1, 1);
		RightHolder3B.setRotationPoint(-2F, 22.5F, 1.5F);
		RightHolder3B.setTextureSize(32, 64);
		RightHolder3B.mirror = true;
		setRotation(RightHolder3B, 0F, 0F, 0F);
		LeftHolder2B = new ModelRenderer(this, 0, 0);
		LeftHolder2B.addBox(0F, 0F, 0F, 1, 2, 1);
		LeftHolder2B.setRotationPoint(-1F, 22.5F, -2.5F);
		LeftHolder2B.setTextureSize(32, 64);
		LeftHolder2B.mirror = true;
		setRotation(LeftHolder2B, 0F, 0F, 0F);
		RightHolder2B = new ModelRenderer(this, 0, 0);
		RightHolder2B.addBox(0F, 0F, 0F, 1, 2, 1);
		RightHolder2B.setRotationPoint(-1F, 22.5F, 1.5F);
		RightHolder2B.setTextureSize(32, 64);
		RightHolder2B.mirror = true;
		setRotation(RightHolder2B, 0F, 0F, 0F);
		RightHolder1B = new ModelRenderer(this, 15, 0);
		RightHolder1B.addBox(0F, 0F, 0F, 2, 3, 1);
		RightHolder1B.setRotationPoint(0F, 22.5F, 1.5F);
		RightHolder1B.setTextureSize(32, 64);
		RightHolder1B.mirror = true;
		setRotation(RightHolder1B, 0F, 0F, 0F);
		LeftHolder1B = new ModelRenderer(this, 15, 0);
		LeftHolder1B.addBox(0F, 0F, 0F, 2, 3, 1);
		LeftHolder1B.setRotationPoint(0F, 22.5F, -2.5F);
		LeftHolder1B.setTextureSize(32, 64);
		LeftHolder1B.mirror = true;
		setRotation(LeftHolder1B, 0F, 0F, 0F);
		BackHolderB = new ModelRenderer(this, 10, 18);
		BackHolderB.addBox(0F, 0F, 0F, 1, 4, 4);
		BackHolderB.setRotationPoint(1.5F, 22.5F, -2F);
		BackHolderB.setTextureSize(32, 64);
		BackHolderB.mirror = true;
		setRotation(BackHolderB, 0F, 0F, 0F);
		TopHolderB = new ModelRenderer(this, 10, 26);
		TopHolderB.addBox(0F, 0F, 0F, 1, 1, 2);
		TopHolderB.setRotationPoint(1.5F, 26.5F, -1F);
		TopHolderB.setTextureSize(32, 64);
		TopHolderB.mirror = true;
		setRotation(TopHolderB, 0F, 0F, 0F);
	}
	
	public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5, boolean blade) {
		//setRotationAngles(f, f1, f2, f3, f4, f5, entity);
		if(blade) {
			blade1.render(f5);
			blade2.render(f5);
		} else {
			UpperRing.render(f5);
			LowerRing.render(f5);
			SideBox.render(f5);
			MainBody.render(f5);
			UpperButton.render(f5);
			LowerButton.render(f5);
			BackHolder.render(f5);
			LeftHolder1.render(f5);
			RightHolder1.render(f5);
			LeftHolder2.render(f5);
			RightHolder2.render(f5);
			FrontHolder.render(f5);
			RightHolder3.render(f5);
			LeftHolder3.render(f5);
			TopHolder.render(f5);
			FrontHolderB.render(f5);
			LeftHolder3B.render(f5);
			RightHolder3B.render(f5);
			LeftHolder2B.render(f5);
			RightHolder2B.render(f5);
			RightHolder1B.render(f5);
			LeftHolder1B.render(f5);
			BackHolderB.render(f5);
			TopHolderB.render(f5);
		}
	}
}
